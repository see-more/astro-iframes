---
export interface SidebarItem {
  id: string;
  label: string;
  url: string;
  icon?: string;
}

export interface Props {
  sidebarItems?: SidebarItem[];
}

const { sidebarItems } = Astro.props;
---

<div class="flex h-screen bg-gray-100">
  <div
    class="w-64 bg-slate-800 text-white flex flex-col border-r-2 border-slate-700"
  >
    <div class="p-5 border-b border-slate-700 bg-slate-900">
      <h3 class="m-0 text-lg font-semibold">Sdibar</h3>
    </div>
    <div class="flex-1 py-2.5 overflow-y-auto">
      {
        sidebarItems?.map((item) => (
          <button
            class="sidebar-item w-full px-5 py-3 border-none bg-transparent text-white text-left cursor-pointer flex items-center gap-3 transition-colors duration-200 ease-in-out hover:bg-slate-700 active:bg-blue-500"
            data-id={item.id}
            data-label={item.label}
            data-url={item.url}
          >
            <span class="text-lg w-6 text-center">{item.icon}</span>
            <span class="text-sm font-medium">{item.label}</span>
          </button>
        ))
      }
    </div>
  </div>

  <div class="flex-1 flex flex-col bg-white">
    <div class="border-b-2 border-gray-200 bg-gray-50 min-h-[48px]">
      <div
        class="flex items-center h-12 overflow-x-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200"
        id="tabs-header"
      >
      </div>
    </div>

    <div class="flex-1 relative bg-white">
      <div
        class="flex items-center justify-center h-full bg-gray-50"
        id="empty-state"
      >
        <div class="text-center text-gray-600">
          <span class="block text-4xl mb-4">📄</span>
          <h3 class="m-0 mb-2 text-xl text-gray-700">选择一个页面开始浏览</h3>
          <p class="m-0 text-sm">点击左侧侧边栏中的任意项目来打开新标签页</p>
        </div>
      </div>
      <iframe
        id="main-iframe"
        class="hidden w-full h-full border-none"
        title="内容展示"></iframe>
    </div>
  </div>
</div>

<script>
  class TabManager {
    tabs: Map<any, any>;
    activeTabId: null | string;
    constructor() {
      this.tabs = new Map();
      this.activeTabId = null;
      this.init();
    }

    init() {
      document.querySelectorAll(".sidebar-item").forEach((item) => {
        item.addEventListener("click", (e) => {
          const id = (e?.currentTarget as HTMLElement)?.getAttribute(
            "data-id"
          ) as string;
          const label = (e?.currentTarget as HTMLElement)?.getAttribute(
            "data-label"
          ) as string;
          const url = (e?.currentTarget as HTMLElement)?.getAttribute(
            "data-url"
          ) as string;
          if (this.activeTabId === id) return;

          this.openTab(id, label, url);
        });
      });
    }

    openTab(id: string, label: string, url: string) {
      if (this.tabs.has(id)) {
        this.activateTab(id);
        return;
      }

      this.tabs.set(id, { id, label, url });
      this.renderTabs();
      this.activateTab(id);
    }

    closeTab(id: string) {
      if (!this.tabs.has(id)) return;

      this.tabs.delete(id);

      if (this.activeTabId === id) {
        const remainingTabs = Array.from(this.tabs.keys());
        if (remainingTabs.length > 0) {
          this.activateTab(remainingTabs[remainingTabs.length - 1]);
        } else {
          this.activeTabId = null;
          this.showEmptyState();
        }
      }

      this.renderTabs();
    }

    activateTab(id: string) {
      if (!this.tabs.has(id)) return;

      this.activeTabId = id;
      const tab = this.tabs.get(id);

      const iframe = document.getElementById(
        "main-iframe"
      ) as HTMLIFrameElement;
      const emptyState = document.getElementById("empty-state") as HTMLElement;

      iframe.src = tab.url;
      iframe.style.display = "block";
      emptyState.style.display = "none";

      this.updateTabStyles();
    }

    showEmptyState() {
      const iframe = document.getElementById(
        "main-iframe"
      ) as HTMLIFrameElement;
      const emptyState = document.getElementById("empty-state") as HTMLElement;

      iframe.style.display = "none";
      emptyState.style.display = "flex";
    }

    renderTabs() {
      const tabsHeader = document.getElementById("tabs-header") as HTMLElement;
      tabsHeader.innerHTML = "";
      this.tabs.forEach((tab) => {
        const tabElement = document.createElement("div");
        tabElement.className = `tab flex items-center gap-2 px-4 py-2 border-none bg-gray-200 border-t-[3px] border-t-transparent cursor-pointer whitespace-nowrap text-sm text-gray-700 transition-all duration-200 ease-in-out min-w-[120px] max-w-[200px] ${this.activeTabId === tab.id ? "bg-white border-t-blue-500 text-slate-800" : ""}`;
        tabElement.innerHTML = `
          <span class="flex-1 overflow-hidden text-ellipsis">${tab.label}</span>
          <button class="tab-close w-4 h-4 rounded-full border-none bg-gray-500 text-white text-xs flex items-center justify-center transition-colors duration-200 hover:bg-red-500" data-tab-id="${tab.id}">×</button>
        `;

        tabElement.addEventListener("click", (e: MouseEvent) => {
          if (!(e.target as HTMLElement)?.classList.contains("tab-close")) {
            this.activateTab(tab.id);
          }
        });

        const closeBtn = tabElement.querySelector(
          ".tab-close"
        ) as HTMLButtonElement;
        closeBtn.addEventListener("click", (e) => {
          e.stopPropagation();
          this.closeTab(tab.id);
        });

        tabsHeader.appendChild(tabElement);
      });
    }

    updateTabStyles() {
      document.querySelectorAll(".tab").forEach((tab) => {
        console.log(tab);
        tab.classList.remove("active");
      });

      const activeTab = document.querySelector(
        `[data-tab-id="${this.activeTabId}"]`
      )?.parentElement;
      if (activeTab) {
        console.log(activeTab);
        activeTab.classList.add("active");
      }
    }
  }
  document.addEventListener("DOMContentLoaded", () => {
    new TabManager();
  });
</script>
